-- Memory module (memory.vhdl)
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity memory is
  Port ( clk : in STD_LOGIC;
         addr_a : in STD_LOGIC_VECTOR(7 downto 0);
         data_a : in STD_LOGIC_VECTOR(7 downto 0);
         we_a : in STD_LOGIC;
         re_a : in STD_LOGIC;
         addr_b : in STD_LOGIC_VECTOR(7 downto 0);
         data_b : in STD_LOGIC_VECTOR(7 downto 0);
         we_b : in STD_LOGIC;
         re_b : in STD_LOGIC;
         q_a : out STD_LOGIC_VECTOR(7 downto 0);
         q_b : out STD_LOGIC_VECTOR(7 downto 0));
end memory;

architecture Behavioral of memory is
  type mem_array is array (0 to 255) of STD_LOGIC_VECTOR(7 downto 0);
  signal mem : mem_array := (others => (others => '0'));
begin
  process(clk)
  begin
    if rising_edge(clk) then
      if re_a = '1' then
        q_a <= mem(to_integer(unsigned(addr_a)));
      end if;

      if we_a = '1' then
        mem(to_integer(unsigned(addr_a))) <= data_a;
      end if;

      if re_b = '1' then
        q_b <= mem(to_integer(unsigned(addr_b)));
      end if;

      if we_b = '1' then
        mem(to_integer(unsigned(addr_b))) <= data_b;
      end if;
    end if;
  end process;
end Behavioral;
